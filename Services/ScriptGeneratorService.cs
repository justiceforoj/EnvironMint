using System;
using System.Collections.Generic;
using System.Linq;
using EnvironMint.Models;

namespace EnvironMint.Services
{
    public class ScriptGeneratorService
    {
        public string GeneratePowerShellScript(string environmentName, List<Tool> tools)
        {
            string script = $@"# {environmentName} Setup Script
# Generated by EnvironMint on {DateTime.Now}

Write-Host ""Starting installation of {environmentName}..."" -ForegroundColor Cyan

# Check if running as administrator
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator""))
{{
Write-Warning ""This script requires administrative privileges. Please run as Administrator.""
exit
}}

# Create a log file
$logFile = ""$env:TEMP\{environmentName.Replace(" ", "")}_setup_log.txt""
Start-Transcript -Path $logFile

try {{
# Ensure winget is available
Write-Host ""Checking for winget..."" -ForegroundColor Cyan
if (!(Get-Command winget -ErrorAction SilentlyContinue)) {{
    Write-Error ""Winget is not installed. Please install App Installer from the Microsoft Store.""
    exit
}}

";

            foreach (var tool in tools)
            {
                if (tool.IsInstalled)
                {
                    script += $@"
# {tool.Name} is already installed
Write-Host ""{tool.Name} is already installed. Skipping..."" -ForegroundColor Yellow
";
                }
                else
                {
                    script += $@"
# Installing {tool.Name}
Write-Host ""Installing {tool.Name}..."" -ForegroundColor Cyan
try {{
    {tool.InstallCommand}
    
    # Validate installation
    Write-Host ""Validating {tool.Name} installation..."" -ForegroundColor Cyan
    {tool.ValidationScript}
    Write-Host ""{tool.Name} installed successfully"" -ForegroundColor Green
}}
catch {{
    Write-Error ""Failed to install {tool.Name}: $_""
}}
";
                }
            }

            script += $@"
Write-Host ""Environment setup completed successfully!"" -ForegroundColor Green
}}
catch {{
Write-Error ""An error occurred during setup: $_""
}}
finally {{
Stop-Transcript
Write-Host ""Log file created at $logFile"" -ForegroundColor Cyan
}}
";

            return script;
        }

        public string GenerateBashScript(string environmentName, List<Tool> tools)
        {
            string script = $@"#!/bin/bash
# {environmentName} Setup Script
# Generated by EnvironMint on {DateTime.Now}

echo ""Starting installation of {environmentName}...""

# Create a log file
LOG_FILE=""$HOME/{environmentName.Replace(" ", "")}_setup_log.txt""
exec > >(tee -a ""$LOG_FILE"") 2>&1

echo ""$(date): Setup started""

# Check if running as root
if [ ""$EUID"" -ne 0 ]; then
  echo ""This script requires root privileges. Please run with sudo.""
  exit 1
fi

# Function to check if a command exists
command_exists() {{
  command -v ""$1"" >/dev/null 2>&1
}}

";

            foreach (var tool in tools)
            {
                string bashInstallCommand = ConvertToBashCommand(tool.InstallCommand);
                string bashValidationScript = ConvertToBashValidation(tool.ValidationScript);

                if (tool.IsInstalled)
                {
                    script += $@"
# {tool.Name} is already installed
echo ""{tool.Name} is already installed. Skipping...""
";
                }
                else
                {
                    script += $@"
# Installing {tool.Name}
echo ""Installing {tool.Name}...""
{{
    {bashInstallCommand}
    
    # Validate installation
    echo ""Validating {tool.Name} installation...""
    {bashValidationScript}
    if [ $? -eq 0 ]; then
        echo ""{tool.Name} installed successfully""
    else
        echo ""Failed to install {tool.Name}""
    fi
}} || {{
    echo ""Error installing {tool.Name}""
}}
";
                }
            }

            script += $@"
echo ""Environment setup completed successfully!""
echo ""$(date): Setup completed""
echo ""Log file created at $LOG_FILE""
";

            return script;
        }

        private string ConvertToBashCommand(string powershellCommand)
        {
            if (powershellCommand.Contains("winget install"))
            {
                return powershellCommand
                    .Replace("winget install", "apt-get install -y")
                    .Replace("--id", "")
                    .Replace("-e", "");
            }

            return powershellCommand;
        }

        private string ConvertToBashValidation(string powershellValidation)
        {
            if (powershellValidation.Contains("Get-Command"))
            {
                int startIndex = powershellValidation.IndexOf("Get-Command") + "Get-Command".Length;
                int endIndex = powershellValidation.IndexOf("-ErrorAction");
                if (endIndex == -1) endIndex = powershellValidation.IndexOf(")");

                string commandName = "command";
                if (startIndex < endIndex)
                {
                    commandName = powershellValidation.Substring(startIndex, endIndex - startIndex).Trim();
                }

                return $"command -v {commandName} >/dev/null 2>&1";
            }

            return "true # Validation not converted";
        }
    }
}